// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package handler_mock

import (
	"github.com/keptn/keptn/resource-service/models"
	"sync"
)

// IServiceResourceManagerMock is a mock implementation of handler.IServiceResourceManager.
//
// 	func TestSomethingThatUsesIServiceResourceManager(t *testing.T) {
//
// 		// make and configure a mocked handler.IServiceResourceManager
// 		mockedIServiceResourceManager := &IServiceResourceManagerMock{
// 			CreateServiceResourcesFunc: func(projectName string, stageName string, serviceName string, params models.CreateResourcesParams)  {
// 				panic("mock out the CreateServiceResources method")
// 			},
// 			DeleteServiceResourceFunc: func(projectName string, stageName string, serviceName string, resourceURI string) error {
// 				panic("mock out the DeleteServiceResource method")
// 			},
// 			GetServiceResourceFunc: func(projectName string, stageName string, serviceName string, resourceURI string) (models.GetResourceResponse, error) {
// 				panic("mock out the GetServiceResource method")
// 			},
// 			GetServiceResourcesFunc: func(projectName string, stageName string, serviceName string, gitCommitID string) (models.GetResourcesResponse, error) {
// 				panic("mock out the GetServiceResources method")
// 			},
// 			UpdateServiceResourceFunc: func(projectName models.UpdateResourceParams, stageName models.UpdateResourceParams, serviceName models.UpdateResourceParams, string models.UpdateResourceParams, params models.UpdateResourceParams) error {
// 				panic("mock out the UpdateServiceResource method")
// 			},
// 			UpdateServiceResourcesFunc: func(projectName string, stageName string, serviceName string, params models.UpdateResourcesParams) error {
// 				panic("mock out the UpdateServiceResources method")
// 			},
// 		}
//
// 		// use mockedIServiceResourceManager in code that requires handler.IServiceResourceManager
// 		// and then make assertions.
//
// 	}
type IServiceResourceManagerMock struct {
	// CreateServiceResourcesFunc mocks the CreateServiceResources method.
	CreateServiceResourcesFunc func(projectName string, stageName string, serviceName string, params models.CreateResourcesParams)

	// DeleteServiceResourceFunc mocks the DeleteServiceResource method.
	DeleteServiceResourceFunc func(projectName string, stageName string, serviceName string, resourceURI string) error

	// GetServiceResourceFunc mocks the GetServiceResource method.
	GetServiceResourceFunc func(projectName string, stageName string, serviceName string, resourceURI string) (models.GetResourceResponse, error)

	// GetServiceResourcesFunc mocks the GetServiceResources method.
	GetServiceResourcesFunc func(projectName string, stageName string, serviceName string, gitCommitID string) (models.GetResourcesResponse, error)

	// UpdateServiceResourceFunc mocks the UpdateServiceResource method.
	UpdateServiceResourceFunc func(projectName models.UpdateResourceParams, stageName models.UpdateResourceParams, serviceName models.UpdateResourceParams, string models.UpdateResourceParams, params models.UpdateResourceParams) error

	// UpdateServiceResourcesFunc mocks the UpdateServiceResources method.
	UpdateServiceResourcesFunc func(projectName string, stageName string, serviceName string, params models.UpdateResourcesParams) error

	// calls tracks calls to the methods.
	calls struct {
		// CreateServiceResources holds details about calls to the CreateServiceResources method.
		CreateServiceResources []struct {
			// ProjectName is the projectName argument value.
			ProjectName string
			// StageName is the stageName argument value.
			StageName string
			// ServiceName is the serviceName argument value.
			ServiceName string
			// Params is the params argument value.
			Params models.CreateResourcesParams
		}
		// DeleteServiceResource holds details about calls to the DeleteServiceResource method.
		DeleteServiceResource []struct {
			// ProjectName is the projectName argument value.
			ProjectName string
			// StageName is the stageName argument value.
			StageName string
			// ServiceName is the serviceName argument value.
			ServiceName string
			// ResourceURI is the resourceURI argument value.
			ResourceURI string
		}
		// GetServiceResource holds details about calls to the GetServiceResource method.
		GetServiceResource []struct {
			// ProjectName is the projectName argument value.
			ProjectName string
			// StageName is the stageName argument value.
			StageName string
			// ServiceName is the serviceName argument value.
			ServiceName string
			// ResourceURI is the resourceURI argument value.
			ResourceURI string
		}
		// GetServiceResources holds details about calls to the GetServiceResources method.
		GetServiceResources []struct {
			// ProjectName is the projectName argument value.
			ProjectName string
			// StageName is the stageName argument value.
			StageName string
			// ServiceName is the serviceName argument value.
			ServiceName string
			// GitCommitID is the gitCommitID argument value.
			GitCommitID string
		}
		// UpdateServiceResource holds details about calls to the UpdateServiceResource method.
		UpdateServiceResource []struct {
			// ProjectName is the projectName argument value.
			ProjectName models.UpdateResourceParams
			// StageName is the stageName argument value.
			StageName models.UpdateResourceParams
			// ServiceName is the serviceName argument value.
			ServiceName models.UpdateResourceParams
			// String is the string argument value.
			String models.UpdateResourceParams
			// Params is the params argument value.
			Params models.UpdateResourceParams
		}
		// UpdateServiceResources holds details about calls to the UpdateServiceResources method.
		UpdateServiceResources []struct {
			// ProjectName is the projectName argument value.
			ProjectName string
			// StageName is the stageName argument value.
			StageName string
			// ServiceName is the serviceName argument value.
			ServiceName string
			// Params is the params argument value.
			Params models.UpdateResourcesParams
		}
	}
	lockCreateServiceResources sync.RWMutex
	lockDeleteServiceResource  sync.RWMutex
	lockGetServiceResource     sync.RWMutex
	lockGetServiceResources    sync.RWMutex
	lockUpdateServiceResource  sync.RWMutex
	lockUpdateServiceResources sync.RWMutex
}

// CreateServiceResources calls CreateServiceResourcesFunc.
func (mock *IServiceResourceManagerMock) CreateServiceResources(projectName string, stageName string, serviceName string, params models.CreateResourcesParams) {
	if mock.CreateServiceResourcesFunc == nil {
		panic("IServiceResourceManagerMock.CreateServiceResourcesFunc: method is nil but IServiceResourceManager.CreateServiceResources was just called")
	}
	callInfo := struct {
		ProjectName string
		StageName   string
		ServiceName string
		Params      models.CreateResourcesParams
	}{
		ProjectName: projectName,
		StageName:   stageName,
		ServiceName: serviceName,
		Params:      params,
	}
	mock.lockCreateServiceResources.Lock()
	mock.calls.CreateServiceResources = append(mock.calls.CreateServiceResources, callInfo)
	mock.lockCreateServiceResources.Unlock()
	mock.CreateServiceResourcesFunc(projectName, stageName, serviceName, params)
}

// CreateServiceResourcesCalls gets all the calls that were made to CreateServiceResources.
// Check the length with:
//     len(mockedIServiceResourceManager.CreateServiceResourcesCalls())
func (mock *IServiceResourceManagerMock) CreateServiceResourcesCalls() []struct {
	ProjectName string
	StageName   string
	ServiceName string
	Params      models.CreateResourcesParams
} {
	var calls []struct {
		ProjectName string
		StageName   string
		ServiceName string
		Params      models.CreateResourcesParams
	}
	mock.lockCreateServiceResources.RLock()
	calls = mock.calls.CreateServiceResources
	mock.lockCreateServiceResources.RUnlock()
	return calls
}

// DeleteServiceResource calls DeleteServiceResourceFunc.
func (mock *IServiceResourceManagerMock) DeleteServiceResource(projectName string, stageName string, serviceName string, resourceURI string) error {
	if mock.DeleteServiceResourceFunc == nil {
		panic("IServiceResourceManagerMock.DeleteServiceResourceFunc: method is nil but IServiceResourceManager.DeleteServiceResource was just called")
	}
	callInfo := struct {
		ProjectName string
		StageName   string
		ServiceName string
		ResourceURI string
	}{
		ProjectName: projectName,
		StageName:   stageName,
		ServiceName: serviceName,
		ResourceURI: resourceURI,
	}
	mock.lockDeleteServiceResource.Lock()
	mock.calls.DeleteServiceResource = append(mock.calls.DeleteServiceResource, callInfo)
	mock.lockDeleteServiceResource.Unlock()
	return mock.DeleteServiceResourceFunc(projectName, stageName, serviceName, resourceURI)
}

// DeleteServiceResourceCalls gets all the calls that were made to DeleteServiceResource.
// Check the length with:
//     len(mockedIServiceResourceManager.DeleteServiceResourceCalls())
func (mock *IServiceResourceManagerMock) DeleteServiceResourceCalls() []struct {
	ProjectName string
	StageName   string
	ServiceName string
	ResourceURI string
} {
	var calls []struct {
		ProjectName string
		StageName   string
		ServiceName string
		ResourceURI string
	}
	mock.lockDeleteServiceResource.RLock()
	calls = mock.calls.DeleteServiceResource
	mock.lockDeleteServiceResource.RUnlock()
	return calls
}

// GetServiceResource calls GetServiceResourceFunc.
func (mock *IServiceResourceManagerMock) GetServiceResource(projectName string, stageName string, serviceName string, resourceURI string) (models.GetResourceResponse, error) {
	if mock.GetServiceResourceFunc == nil {
		panic("IServiceResourceManagerMock.GetServiceResourceFunc: method is nil but IServiceResourceManager.GetServiceResource was just called")
	}
	callInfo := struct {
		ProjectName string
		StageName   string
		ServiceName string
		ResourceURI string
	}{
		ProjectName: projectName,
		StageName:   stageName,
		ServiceName: serviceName,
		ResourceURI: resourceURI,
	}
	mock.lockGetServiceResource.Lock()
	mock.calls.GetServiceResource = append(mock.calls.GetServiceResource, callInfo)
	mock.lockGetServiceResource.Unlock()
	return mock.GetServiceResourceFunc(projectName, stageName, serviceName, resourceURI)
}

// GetServiceResourceCalls gets all the calls that were made to GetServiceResource.
// Check the length with:
//     len(mockedIServiceResourceManager.GetServiceResourceCalls())
func (mock *IServiceResourceManagerMock) GetServiceResourceCalls() []struct {
	ProjectName string
	StageName   string
	ServiceName string
	ResourceURI string
} {
	var calls []struct {
		ProjectName string
		StageName   string
		ServiceName string
		ResourceURI string
	}
	mock.lockGetServiceResource.RLock()
	calls = mock.calls.GetServiceResource
	mock.lockGetServiceResource.RUnlock()
	return calls
}

// GetServiceResources calls GetServiceResourcesFunc.
func (mock *IServiceResourceManagerMock) GetServiceResources(projectName string, stageName string, serviceName string, gitCommitID string) (models.GetResourcesResponse, error) {
	if mock.GetServiceResourcesFunc == nil {
		panic("IServiceResourceManagerMock.GetServiceResourcesFunc: method is nil but IServiceResourceManager.GetServiceResources was just called")
	}
	callInfo := struct {
		ProjectName string
		StageName   string
		ServiceName string
		GitCommitID string
	}{
		ProjectName: projectName,
		StageName:   stageName,
		ServiceName: serviceName,
		GitCommitID: gitCommitID,
	}
	mock.lockGetServiceResources.Lock()
	mock.calls.GetServiceResources = append(mock.calls.GetServiceResources, callInfo)
	mock.lockGetServiceResources.Unlock()
	return mock.GetServiceResourcesFunc(projectName, stageName, serviceName, gitCommitID)
}

// GetServiceResourcesCalls gets all the calls that were made to GetServiceResources.
// Check the length with:
//     len(mockedIServiceResourceManager.GetServiceResourcesCalls())
func (mock *IServiceResourceManagerMock) GetServiceResourcesCalls() []struct {
	ProjectName string
	StageName   string
	ServiceName string
	GitCommitID string
} {
	var calls []struct {
		ProjectName string
		StageName   string
		ServiceName string
		GitCommitID string
	}
	mock.lockGetServiceResources.RLock()
	calls = mock.calls.GetServiceResources
	mock.lockGetServiceResources.RUnlock()
	return calls
}

// UpdateServiceResource calls UpdateServiceResourceFunc.
func (mock *IServiceResourceManagerMock) UpdateServiceResource(projectName models.UpdateResourceParams, stageName models.UpdateResourceParams, serviceName models.UpdateResourceParams, string models.UpdateResourceParams, params models.UpdateResourceParams) error {
	if mock.UpdateServiceResourceFunc == nil {
		panic("IServiceResourceManagerMock.UpdateServiceResourceFunc: method is nil but IServiceResourceManager.UpdateServiceResource was just called")
	}
	callInfo := struct {
		ProjectName models.UpdateResourceParams
		StageName   models.UpdateResourceParams
		ServiceName models.UpdateResourceParams
		String      models.UpdateResourceParams
		Params      models.UpdateResourceParams
	}{
		ProjectName: projectName,
		StageName:   stageName,
		ServiceName: serviceName,
		String:      string,
		Params:      params,
	}
	mock.lockUpdateServiceResource.Lock()
	mock.calls.UpdateServiceResource = append(mock.calls.UpdateServiceResource, callInfo)
	mock.lockUpdateServiceResource.Unlock()
	return mock.UpdateServiceResourceFunc(projectName, stageName, serviceName, string, params)
}

// UpdateServiceResourceCalls gets all the calls that were made to UpdateServiceResource.
// Check the length with:
//     len(mockedIServiceResourceManager.UpdateServiceResourceCalls())
func (mock *IServiceResourceManagerMock) UpdateServiceResourceCalls() []struct {
	ProjectName models.UpdateResourceParams
	StageName   models.UpdateResourceParams
	ServiceName models.UpdateResourceParams
	String      models.UpdateResourceParams
	Params      models.UpdateResourceParams
} {
	var calls []struct {
		ProjectName models.UpdateResourceParams
		StageName   models.UpdateResourceParams
		ServiceName models.UpdateResourceParams
		String      models.UpdateResourceParams
		Params      models.UpdateResourceParams
	}
	mock.lockUpdateServiceResource.RLock()
	calls = mock.calls.UpdateServiceResource
	mock.lockUpdateServiceResource.RUnlock()
	return calls
}

// UpdateServiceResources calls UpdateServiceResourcesFunc.
func (mock *IServiceResourceManagerMock) UpdateServiceResources(projectName string, stageName string, serviceName string, params models.UpdateResourcesParams) error {
	if mock.UpdateServiceResourcesFunc == nil {
		panic("IServiceResourceManagerMock.UpdateServiceResourcesFunc: method is nil but IServiceResourceManager.UpdateServiceResources was just called")
	}
	callInfo := struct {
		ProjectName string
		StageName   string
		ServiceName string
		Params      models.UpdateResourcesParams
	}{
		ProjectName: projectName,
		StageName:   stageName,
		ServiceName: serviceName,
		Params:      params,
	}
	mock.lockUpdateServiceResources.Lock()
	mock.calls.UpdateServiceResources = append(mock.calls.UpdateServiceResources, callInfo)
	mock.lockUpdateServiceResources.Unlock()
	return mock.UpdateServiceResourcesFunc(projectName, stageName, serviceName, params)
}

// UpdateServiceResourcesCalls gets all the calls that were made to UpdateServiceResources.
// Check the length with:
//     len(mockedIServiceResourceManager.UpdateServiceResourcesCalls())
func (mock *IServiceResourceManagerMock) UpdateServiceResourcesCalls() []struct {
	ProjectName string
	StageName   string
	ServiceName string
	Params      models.UpdateResourcesParams
} {
	var calls []struct {
		ProjectName string
		StageName   string
		ServiceName string
		Params      models.UpdateResourcesParams
	}
	mock.lockUpdateServiceResources.RLock()
	calls = mock.calls.UpdateServiceResources
	mock.lockUpdateServiceResources.RUnlock()
	return calls
}
