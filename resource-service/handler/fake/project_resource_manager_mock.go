// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package handler_mock

import (
	"github.com/keptn/keptn/resource-service/models"
	"sync"
)

// IProjectResourceManagerMock is a mock implementation of handler.IProjectResourceManager.
//
// 	func TestSomethingThatUsesIProjectResourceManager(t *testing.T) {
//
// 		// make and configure a mocked handler.IProjectResourceManager
// 		mockedIProjectResourceManager := &IProjectResourceManagerMock{
// 			CreateProjectResourcesFunc: func(projectName string, params models.CreateResourcesParams)  {
// 				panic("mock out the CreateProjectResources method")
// 			},
// 			DeleteProjectResourceFunc: func(projectName string, resourceURI string) error {
// 				panic("mock out the DeleteProjectResource method")
// 			},
// 			GetProjectResourceFunc: func(projectName string, resourceURI string) (models.GetResourceResponse, error) {
// 				panic("mock out the GetProjectResource method")
// 			},
// 			GetProjectResourcesFunc: func(projectName string, gitCommitID string) (models.GetResourcesResponse, error) {
// 				panic("mock out the GetProjectResources method")
// 			},
// 			UpdateProjectResourceFunc: func(projectName string, params models.UpdateResourceParams) error {
// 				panic("mock out the UpdateProjectResource method")
// 			},
// 			UpdateProjectResourcesFunc: func(projectName string, params models.UpdateResourcesParams) error {
// 				panic("mock out the UpdateProjectResources method")
// 			},
// 		}
//
// 		// use mockedIProjectResourceManager in code that requires handler.IProjectResourceManager
// 		// and then make assertions.
//
// 	}
type IProjectResourceManagerMock struct {
	// CreateProjectResourcesFunc mocks the CreateProjectResources method.
	CreateProjectResourcesFunc func(projectName string, params models.CreateResourcesParams)

	// DeleteProjectResourceFunc mocks the DeleteProjectResource method.
	DeleteProjectResourceFunc func(projectName string, resourceURI string) error

	// GetProjectResourceFunc mocks the GetProjectResource method.
	GetProjectResourceFunc func(projectName string, resourceURI string) (models.GetResourceResponse, error)

	// GetProjectResourcesFunc mocks the GetProjectResources method.
	GetProjectResourcesFunc func(projectName string, gitCommitID string) (models.GetResourcesResponse, error)

	// UpdateProjectResourceFunc mocks the UpdateProjectResource method.
	UpdateProjectResourceFunc func(projectName string, params models.UpdateResourceParams) error

	// UpdateProjectResourcesFunc mocks the UpdateProjectResources method.
	UpdateProjectResourcesFunc func(projectName string, params models.UpdateResourcesParams) error

	// calls tracks calls to the methods.
	calls struct {
		// CreateProjectResources holds details about calls to the CreateProjectResources method.
		CreateProjectResources []struct {
			// ProjectName is the projectName argument value.
			ProjectName string
			// Params is the params argument value.
			Params models.CreateResourcesParams
		}
		// DeleteProjectResource holds details about calls to the DeleteProjectResource method.
		DeleteProjectResource []struct {
			// ProjectName is the projectName argument value.
			ProjectName string
			// ResourceURI is the resourceURI argument value.
			ResourceURI string
		}
		// GetProjectResource holds details about calls to the GetProjectResource method.
		GetProjectResource []struct {
			// ProjectName is the projectName argument value.
			ProjectName string
			// ResourceURI is the resourceURI argument value.
			ResourceURI string
		}
		// GetProjectResources holds details about calls to the GetProjectResources method.
		GetProjectResources []struct {
			// ProjectName is the projectName argument value.
			ProjectName string
			// GitCommitID is the gitCommitID argument value.
			GitCommitID string
		}
		// UpdateProjectResource holds details about calls to the UpdateProjectResource method.
		UpdateProjectResource []struct {
			// ProjectName is the projectName argument value.
			ProjectName string
			// Params is the params argument value.
			Params models.UpdateResourceParams
		}
		// UpdateProjectResources holds details about calls to the UpdateProjectResources method.
		UpdateProjectResources []struct {
			// ProjectName is the projectName argument value.
			ProjectName string
			// Params is the params argument value.
			Params models.UpdateResourcesParams
		}
	}
	lockCreateProjectResources sync.RWMutex
	lockDeleteProjectResource  sync.RWMutex
	lockGetProjectResource     sync.RWMutex
	lockGetProjectResources    sync.RWMutex
	lockUpdateProjectResource  sync.RWMutex
	lockUpdateProjectResources sync.RWMutex
}

// CreateProjectResources calls CreateProjectResourcesFunc.
func (mock *IProjectResourceManagerMock) CreateProjectResources(projectName string, params models.CreateResourcesParams) {
	if mock.CreateProjectResourcesFunc == nil {
		panic("IProjectResourceManagerMock.CreateProjectResourcesFunc: method is nil but IProjectResourceManager.CreateProjectResources was just called")
	}
	callInfo := struct {
		ProjectName string
		Params      models.CreateResourcesParams
	}{
		ProjectName: projectName,
		Params:      params,
	}
	mock.lockCreateProjectResources.Lock()
	mock.calls.CreateProjectResources = append(mock.calls.CreateProjectResources, callInfo)
	mock.lockCreateProjectResources.Unlock()
	mock.CreateProjectResourcesFunc(projectName, params)
}

// CreateProjectResourcesCalls gets all the calls that were made to CreateProjectResources.
// Check the length with:
//     len(mockedIProjectResourceManager.CreateProjectResourcesCalls())
func (mock *IProjectResourceManagerMock) CreateProjectResourcesCalls() []struct {
	ProjectName string
	Params      models.CreateResourcesParams
} {
	var calls []struct {
		ProjectName string
		Params      models.CreateResourcesParams
	}
	mock.lockCreateProjectResources.RLock()
	calls = mock.calls.CreateProjectResources
	mock.lockCreateProjectResources.RUnlock()
	return calls
}

// DeleteProjectResource calls DeleteProjectResourceFunc.
func (mock *IProjectResourceManagerMock) DeleteProjectResource(projectName string, resourceURI string) error {
	if mock.DeleteProjectResourceFunc == nil {
		panic("IProjectResourceManagerMock.DeleteProjectResourceFunc: method is nil but IProjectResourceManager.DeleteProjectResource was just called")
	}
	callInfo := struct {
		ProjectName string
		ResourceURI string
	}{
		ProjectName: projectName,
		ResourceURI: resourceURI,
	}
	mock.lockDeleteProjectResource.Lock()
	mock.calls.DeleteProjectResource = append(mock.calls.DeleteProjectResource, callInfo)
	mock.lockDeleteProjectResource.Unlock()
	return mock.DeleteProjectResourceFunc(projectName, resourceURI)
}

// DeleteProjectResourceCalls gets all the calls that were made to DeleteProjectResource.
// Check the length with:
//     len(mockedIProjectResourceManager.DeleteProjectResourceCalls())
func (mock *IProjectResourceManagerMock) DeleteProjectResourceCalls() []struct {
	ProjectName string
	ResourceURI string
} {
	var calls []struct {
		ProjectName string
		ResourceURI string
	}
	mock.lockDeleteProjectResource.RLock()
	calls = mock.calls.DeleteProjectResource
	mock.lockDeleteProjectResource.RUnlock()
	return calls
}

// GetProjectResource calls GetProjectResourceFunc.
func (mock *IProjectResourceManagerMock) GetProjectResource(projectName string, resourceURI string) (models.GetResourceResponse, error) {
	if mock.GetProjectResourceFunc == nil {
		panic("IProjectResourceManagerMock.GetProjectResourceFunc: method is nil but IProjectResourceManager.GetProjectResource was just called")
	}
	callInfo := struct {
		ProjectName string
		ResourceURI string
	}{
		ProjectName: projectName,
		ResourceURI: resourceURI,
	}
	mock.lockGetProjectResource.Lock()
	mock.calls.GetProjectResource = append(mock.calls.GetProjectResource, callInfo)
	mock.lockGetProjectResource.Unlock()
	return mock.GetProjectResourceFunc(projectName, resourceURI)
}

// GetProjectResourceCalls gets all the calls that were made to GetProjectResource.
// Check the length with:
//     len(mockedIProjectResourceManager.GetProjectResourceCalls())
func (mock *IProjectResourceManagerMock) GetProjectResourceCalls() []struct {
	ProjectName string
	ResourceURI string
} {
	var calls []struct {
		ProjectName string
		ResourceURI string
	}
	mock.lockGetProjectResource.RLock()
	calls = mock.calls.GetProjectResource
	mock.lockGetProjectResource.RUnlock()
	return calls
}

// GetProjectResources calls GetProjectResourcesFunc.
func (mock *IProjectResourceManagerMock) GetProjectResources(projectName string, gitCommitID string) (models.GetResourcesResponse, error) {
	if mock.GetProjectResourcesFunc == nil {
		panic("IProjectResourceManagerMock.GetProjectResourcesFunc: method is nil but IProjectResourceManager.GetProjectResources was just called")
	}
	callInfo := struct {
		ProjectName string
		GitCommitID string
	}{
		ProjectName: projectName,
		GitCommitID: gitCommitID,
	}
	mock.lockGetProjectResources.Lock()
	mock.calls.GetProjectResources = append(mock.calls.GetProjectResources, callInfo)
	mock.lockGetProjectResources.Unlock()
	return mock.GetProjectResourcesFunc(projectName, gitCommitID)
}

// GetProjectResourcesCalls gets all the calls that were made to GetProjectResources.
// Check the length with:
//     len(mockedIProjectResourceManager.GetProjectResourcesCalls())
func (mock *IProjectResourceManagerMock) GetProjectResourcesCalls() []struct {
	ProjectName string
	GitCommitID string
} {
	var calls []struct {
		ProjectName string
		GitCommitID string
	}
	mock.lockGetProjectResources.RLock()
	calls = mock.calls.GetProjectResources
	mock.lockGetProjectResources.RUnlock()
	return calls
}

// UpdateProjectResource calls UpdateProjectResourceFunc.
func (mock *IProjectResourceManagerMock) UpdateProjectResource(projectName string, params models.UpdateResourceParams) error {
	if mock.UpdateProjectResourceFunc == nil {
		panic("IProjectResourceManagerMock.UpdateProjectResourceFunc: method is nil but IProjectResourceManager.UpdateProjectResource was just called")
	}
	callInfo := struct {
		ProjectName string
		Params      models.UpdateResourceParams
	}{
		ProjectName: projectName,
		Params:      params,
	}
	mock.lockUpdateProjectResource.Lock()
	mock.calls.UpdateProjectResource = append(mock.calls.UpdateProjectResource, callInfo)
	mock.lockUpdateProjectResource.Unlock()
	return mock.UpdateProjectResourceFunc(projectName, params)
}

// UpdateProjectResourceCalls gets all the calls that were made to UpdateProjectResource.
// Check the length with:
//     len(mockedIProjectResourceManager.UpdateProjectResourceCalls())
func (mock *IProjectResourceManagerMock) UpdateProjectResourceCalls() []struct {
	ProjectName string
	Params      models.UpdateResourceParams
} {
	var calls []struct {
		ProjectName string
		Params      models.UpdateResourceParams
	}
	mock.lockUpdateProjectResource.RLock()
	calls = mock.calls.UpdateProjectResource
	mock.lockUpdateProjectResource.RUnlock()
	return calls
}

// UpdateProjectResources calls UpdateProjectResourcesFunc.
func (mock *IProjectResourceManagerMock) UpdateProjectResources(projectName string, params models.UpdateResourcesParams) error {
	if mock.UpdateProjectResourcesFunc == nil {
		panic("IProjectResourceManagerMock.UpdateProjectResourcesFunc: method is nil but IProjectResourceManager.UpdateProjectResources was just called")
	}
	callInfo := struct {
		ProjectName string
		Params      models.UpdateResourcesParams
	}{
		ProjectName: projectName,
		Params:      params,
	}
	mock.lockUpdateProjectResources.Lock()
	mock.calls.UpdateProjectResources = append(mock.calls.UpdateProjectResources, callInfo)
	mock.lockUpdateProjectResources.Unlock()
	return mock.UpdateProjectResourcesFunc(projectName, params)
}

// UpdateProjectResourcesCalls gets all the calls that were made to UpdateProjectResources.
// Check the length with:
//     len(mockedIProjectResourceManager.UpdateProjectResourcesCalls())
func (mock *IProjectResourceManagerMock) UpdateProjectResourcesCalls() []struct {
	ProjectName string
	Params      models.UpdateResourcesParams
} {
	var calls []struct {
		ProjectName string
		Params      models.UpdateResourcesParams
	}
	mock.lockUpdateProjectResources.RLock()
	calls = mock.calls.UpdateProjectResources
	mock.lockUpdateProjectResources.RUnlock()
	return calls
}
