// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package handler_mock

import (
	"github.com/keptn/keptn/resource-service/models"
	"sync"
)

// IServiceManagerMock is a mock implementation of handler.IServiceManager.
//
// 	func TestSomethingThatUsesIServiceManager(t *testing.T) {
//
// 		// make and configure a mocked handler.IServiceManager
// 		mockedIServiceManager := &IServiceManagerMock{
// 			CreateServiceFunc: func(projectName string, stageName string, params models.CreateStageParams) error {
// 				panic("mock out the CreateService method")
// 			},
// 			DeleteServiceFunc: func(projectName string, stageName string, serviceName string) error {
// 				panic("mock out the DeleteService method")
// 			},
// 		}
//
// 		// use mockedIServiceManager in code that requires handler.IServiceManager
// 		// and then make assertions.
//
// 	}
type IServiceManagerMock struct {
	// CreateServiceFunc mocks the CreateService method.
	CreateServiceFunc func(projectName string, stageName string, params models.CreateStageParams) error

	// DeleteServiceFunc mocks the DeleteService method.
	DeleteServiceFunc func(projectName string, stageName string, serviceName string) error

	// calls tracks calls to the methods.
	calls struct {
		// CreateService holds details about calls to the CreateService method.
		CreateService []struct {
			// ProjectName is the projectName argument value.
			ProjectName string
			// StageName is the stageName argument value.
			StageName string
			// Params is the params argument value.
			Params models.CreateStageParams
		}
		// DeleteService holds details about calls to the DeleteService method.
		DeleteService []struct {
			// ProjectName is the projectName argument value.
			ProjectName string
			// StageName is the stageName argument value.
			StageName string
			// ServiceName is the serviceName argument value.
			ServiceName string
		}
	}
	lockCreateService sync.RWMutex
	lockDeleteService sync.RWMutex
}

// CreateService calls CreateServiceFunc.
func (mock *IServiceManagerMock) CreateService(projectName string, stageName string, params models.CreateStageParams) error {
	if mock.CreateServiceFunc == nil {
		panic("IServiceManagerMock.CreateServiceFunc: method is nil but IServiceManager.CreateService was just called")
	}
	callInfo := struct {
		ProjectName string
		StageName   string
		Params      models.CreateStageParams
	}{
		ProjectName: projectName,
		StageName:   stageName,
		Params:      params,
	}
	mock.lockCreateService.Lock()
	mock.calls.CreateService = append(mock.calls.CreateService, callInfo)
	mock.lockCreateService.Unlock()
	return mock.CreateServiceFunc(projectName, stageName, params)
}

// CreateServiceCalls gets all the calls that were made to CreateService.
// Check the length with:
//     len(mockedIServiceManager.CreateServiceCalls())
func (mock *IServiceManagerMock) CreateServiceCalls() []struct {
	ProjectName string
	StageName   string
	Params      models.CreateStageParams
} {
	var calls []struct {
		ProjectName string
		StageName   string
		Params      models.CreateStageParams
	}
	mock.lockCreateService.RLock()
	calls = mock.calls.CreateService
	mock.lockCreateService.RUnlock()
	return calls
}

// DeleteService calls DeleteServiceFunc.
func (mock *IServiceManagerMock) DeleteService(projectName string, stageName string, serviceName string) error {
	if mock.DeleteServiceFunc == nil {
		panic("IServiceManagerMock.DeleteServiceFunc: method is nil but IServiceManager.DeleteService was just called")
	}
	callInfo := struct {
		ProjectName string
		StageName   string
		ServiceName string
	}{
		ProjectName: projectName,
		StageName:   stageName,
		ServiceName: serviceName,
	}
	mock.lockDeleteService.Lock()
	mock.calls.DeleteService = append(mock.calls.DeleteService, callInfo)
	mock.lockDeleteService.Unlock()
	return mock.DeleteServiceFunc(projectName, stageName, serviceName)
}

// DeleteServiceCalls gets all the calls that were made to DeleteService.
// Check the length with:
//     len(mockedIServiceManager.DeleteServiceCalls())
func (mock *IServiceManagerMock) DeleteServiceCalls() []struct {
	ProjectName string
	StageName   string
	ServiceName string
} {
	var calls []struct {
		ProjectName string
		StageName   string
		ServiceName string
	}
	mock.lockDeleteService.RLock()
	calls = mock.calls.DeleteService
	mock.lockDeleteService.RUnlock()
	return calls
}
