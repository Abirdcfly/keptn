diff --git a/cp-connector/go.mod b/cp-connector/go.mod
index 7d4222b9c..8aa5a9f84 100644
--- a/cp-connector/go.mod
+++ b/cp-connector/go.mod
@@ -20,6 +20,7 @@ require (
 	github.com/google/uuid v1.3.0 // indirect
 	github.com/json-iterator/go v1.1.10 // indirect
 	github.com/klauspost/compress v1.14.4 // indirect
+	github.com/matryer/moq v0.2.7 // indirect
 	github.com/minio/highwayhash v1.0.2 // indirect
 	github.com/modern-go/concurrent v0.0.0-20180228061459-e0a39a4cb421 // indirect
 	github.com/modern-go/reflect2 v0.0.0-20180701023420-4b7aa43c6742 // indirect
@@ -35,8 +36,10 @@ require (
 	go.uber.org/multierr v1.1.0 // indirect
 	go.uber.org/zap v1.10.0 // indirect
 	golang.org/x/crypto v0.0.0-20220315160706-3147a52a75dd // indirect
+	golang.org/x/mod v0.6.0-dev.0.20220106191415-9b9b3d81d5e3 // indirect
 	golang.org/x/sys v0.0.0-20220111092808-5a964db01320 // indirect
 	golang.org/x/time v0.0.0-20211116232009-f0f3c7e86c11 // indirect
+	golang.org/x/tools v0.1.10 // indirect
 	golang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1 // indirect
 	gopkg.in/yaml.v3 v3.0.0-20210107192922-496545a6307b // indirect
 )
diff --git a/cp-connector/go.sum b/cp-connector/go.sum
index d6ad93630..e95f23754 100644
--- a/cp-connector/go.sum
+++ b/cp-connector/go.sum
@@ -72,6 +72,8 @@ github.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=
 github.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=
 github.com/kr/text v0.2.0 h1:5Nx0Ya0ZqY2ygV366QzturHI13Jq95ApcVaJBhpS+AY=
 github.com/kr/text v0.2.0/go.mod h1:eLer722TekiGuMkidMxC/pM04lWEeraHUUmBw8l2grE=
+github.com/matryer/moq v0.2.7 h1:RtpiPUM8L7ZSCbSwK+QcZH/E9tgqAkFjKQxsRs25b4w=
+github.com/matryer/moq v0.2.7/go.mod h1:kITsx543GOENm48TUAQyJ9+SAvFSr7iGQXPoth/VUBk=
 github.com/minio/highwayhash v1.0.2 h1:Aak5U0nElisjDCfPSG79Tgzkn2gl66NxOMspRrKnA/g=
 github.com/minio/highwayhash v1.0.2/go.mod h1:BQskDq+xkJ12lmlUUi7U0M5Swg3EWR+dLTk+kldvVxY=
 github.com/modern-go/concurrent v0.0.0-20180228061459-e0a39a4cb421 h1:ZqeYNhU3OHLH3mGKHDcjJRFFRrJa6eAM5H+CtDdOsPc=
@@ -104,6 +106,7 @@ github.com/stretchr/testify v1.7.1 h1:5TQK59W5E3v0r2duFAb7P95B6hEeOyEnHRa8MjYSMT
 github.com/stretchr/testify v1.7.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=
 github.com/valyala/bytebufferpool v1.0.0 h1:GqA5TC/0021Y/b9FG4Oi9Mr3q7XYx6KllzawFIhcdPw=
 github.com/valyala/bytebufferpool v1.0.0/go.mod h1:6bBcMArwyJ5K/AmCkWv1jt77kVWyCJ6HpOuEn7z0Csc=
+github.com/yuin/goldmark v1.4.1/go.mod h1:mwnBkeHKe2W/ZEtQ+71ViKU8L12m81fl3OWwC1Zlc8k=
 go.opentelemetry.io/contrib v0.23.0 h1:MgRuo0JZZX8J9WLRjyd7OpTSbaLOdQXXJa6SnZvlWLM=
 go.opentelemetry.io/contrib v0.23.0/go.mod h1:EH4yDYeNoaTqn/8yCWQmfNB78VHfGX2Jt2bvnvzBlGM=
 go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.23.0/go.mod h1:wLrbAf2Qb+kFsEjowrxOcuy2SE0dcY0VwFiiYCmUeFQ=
@@ -137,20 +140,25 @@ go.uber.org/zap v1.10.0/go.mod h1:vwi/ZaCAaUcBkycHslxD9B2zi4UTXhF60s6SWpuDF0Q=
 golang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=
 golang.org/x/crypto v0.0.0-20200622213623-75b288015ac9/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=
 golang.org/x/crypto v0.0.0-20210314154223-e6e6c4f2bb5b/go.mod h1:T9bdIzuCu7OtxOm1hfPfRQxPLYneinmdGuTeoZ9dtd4=
+golang.org/x/crypto v0.0.0-20210921155107-089bfa567519/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=
 golang.org/x/crypto v0.0.0-20220315160706-3147a52a75dd h1:XcWmESyNjXJMLahc3mqVQJcgSTDxFxhETVlfk9uGc38=
 golang.org/x/crypto v0.0.0-20220315160706-3147a52a75dd/go.mod h1:IxCIyHEi3zRg3s0A5j5BB6A9Jmi73HwBIUl50j+osU4=
 golang.org/x/exp v0.0.0-20190121172915-509febef88a4/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=
 golang.org/x/lint v0.0.0-20181026193005-c67002cb31c3/go.mod h1:UVdnD1Gm6xHRNCYTkRU2/jEulfH38KcIWyp/GAMgvoE=
 golang.org/x/lint v0.0.0-20190227174305-5b3e6a55c961/go.mod h1:wehouNa3lNwaWXcvxsM5YxQ5yQlVC4a0KAMCusXpPoU=
 golang.org/x/lint v0.0.0-20190313153728-d0100b6bd8b3/go.mod h1:6SW0HCj/g11FgYtHlgUYUwCkIfeOF89ocIRzGO/8vkc=
+golang.org/x/mod v0.6.0-dev.0.20220106191415-9b9b3d81d5e3 h1:kQgndtyPBW/JIYERgdxfwMYh3AVStj88WQTlNDi2a+o=
+golang.org/x/mod v0.6.0-dev.0.20220106191415-9b9b3d81d5e3/go.mod h1:3p9vT2HGsQu2K1YbXdKPJLVgG5VJdoTa1poYQBtP1AY=
 golang.org/x/net v0.0.0-20180724234803-3673e40ba225/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
 golang.org/x/net v0.0.0-20180826012351-8a410e7b638d/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
 golang.org/x/net v0.0.0-20190108225652-1e06a53dbb7e/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
 golang.org/x/net v0.0.0-20190213061140-3a22650c66bd/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
 golang.org/x/net v0.0.0-20190311183353-d8887717615a/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=
 golang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=
+golang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=
 golang.org/x/net v0.0.0-20200822124328-c89045814202/go.mod h1:/O7V0waA8r7cgGh81Ro3o1hOxt32SMVPicZroKQ2sZA=
 golang.org/x/net v0.0.0-20210226172049-e18ecbb05110/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=
+golang.org/x/net v0.0.0-20211015210444-4f30a5c0130f/go.mod h1:9nx3DQGgdP8bBQD5qxJ1jj9UTztislL4KSBs9R2vV5Y=
 golang.org/x/net v0.0.0-20211112202133-69e39bad7dc2/go.mod h1:9nx3DQGgdP8bBQD5qxJ1jj9UTztislL4KSBs9R2vV5Y=
 golang.org/x/oauth2 v0.0.0-20180821212333-d2e6202438be/go.mod h1:N/0e6XlmueqKjAGxoOufVs8QHGRruUQn6yWY3a++T0U=
 golang.org/x/oauth2 v0.0.0-20200107190931-bf48bf16ab8d/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=
@@ -159,6 +167,7 @@ golang.org/x/sync v0.0.0-20181108010431-42b317875d0f/go.mod h1:RxMgew5VJxzue5/jJ
 golang.org/x/sync v0.0.0-20181221193216-37e7f081c4d4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sync v0.0.0-20190911185100-cd5d95a43a6e/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
+golang.org/x/sync v0.0.0-20210220032951-036812b2e83c/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sys v0.0.0-20180830151530-49385e6e1522/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
 golang.org/x/sys v0.0.0-20190130150945-aca44879d564/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
 golang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
@@ -168,12 +177,14 @@ golang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7w
 golang.org/x/sys v0.0.0-20210423082822-04245dca01da/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20210423185535-09eb48e85fd7/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20210615035016-665e8c7367d1/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
+golang.org/x/sys v0.0.0-20211019181941-9d821ace8654/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.0.0-20220111092808-5a964db01320 h1:0jf+tOCoZ3LyutmCOWpVni1chK4VfFLhRsDK7MhqGRY=
 golang.org/x/sys v0.0.0-20220111092808-5a964db01320/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=
 golang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
 golang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
 golang.org/x/text v0.3.6/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
+golang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=
 golang.org/x/time v0.0.0-20210723032227-1f47c861a9ac/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=
 golang.org/x/time v0.0.0-20211116232009-f0f3c7e86c11 h1:GZokNIeuVkl3aZHJchRrr13WCsols02MLUcz1U9is6M=
 golang.org/x/time v0.0.0-20211116232009-f0f3c7e86c11/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=
@@ -182,6 +193,11 @@ golang.org/x/tools v0.0.0-20190114222345-bf090417da8b/go.mod h1:n7NCudcB/nEzxVGm
 golang.org/x/tools v0.0.0-20190226205152-f727befe758c/go.mod h1:9Yl7xja0Znq3iFh3HoIrodX9oNMXvdceNzlUR8zjMvY=
 golang.org/x/tools v0.0.0-20190311212946-11955173bddd/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=
 golang.org/x/tools v0.0.0-20190524140312-2c0ae7006135/go.mod h1:RgjU9mgBXZiqYHBnxXauZ1Gv1EHHAz9KjViQ78xBX0Q=
+golang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=
+golang.org/x/tools v0.1.10 h1:QjFRCZxdOhBJ/UNgnBZLbNV13DlbnK0quyivTnXJM20=
+golang.org/x/tools v0.1.10/go.mod h1:Uh6Zz+xoGYZom868N8YTex3t7RhtHDBrE8Gzo9bV56E=
+golang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
+golang.org/x/xerrors v0.0.0-20191011141410-1b5146add898/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
 golang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
 golang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1 h1:go1bK/D/BFZV2I8cIQd1NKEZ+0owSTG1fDTci4IqFcE=
 golang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
diff --git a/cp-connector/pkg/controlplane/eventsource_test.go b/cp-connector/pkg/controlplane/eventsource_test.go
index e1ef3a915..978ba60e7 100644
--- a/cp-connector/pkg/controlplane/eventsource_test.go
+++ b/cp-connector/pkg/controlplane/eventsource_test.go
@@ -127,7 +127,7 @@ func TestEventSourceForwardsEventToChannel(t *testing.T) {
 		UnsubscribeAllFn:         func() error { return nil },
 	}
 	logHandler := &fake.LogInterfaceMock{
-		LogFn: func(logs []models.LogEntry) { return },
+		LogFunc: func(logs []models.LogEntry) { return },
 	}
 	eventChannel := make(chan EventUpdate)
 	eventSource := NewNATSEventSource(natsConnectorMock, logHandler)
@@ -147,7 +147,7 @@ func TestEventSourceCancelDisconnectsFromBroker(t *testing.T) {
 		DisconnectFn:             func() error { return nil },
 	}
 	logHandler := &fake.LogInterfaceMock{
-		LogFn: func(logs []models.LogEntry) { return },
+		LogFunc: func(logs []models.LogEntry) { return },
 	}
 	ctx, cancel := context.WithCancel(context.TODO())
 	NewNATSEventSource(natsConnectorMock, logHandler).Start(ctx, RegistrationData{}, make(chan EventUpdate))
@@ -161,7 +161,7 @@ func TestEventSourceCancelDisconnectFromBrokerFails(t *testing.T) {
 		DisconnectFn:             func() error { return fmt.Errorf("error occured") },
 	}
 	logHandler := &fake.LogInterfaceMock{
-		LogFn: func(logs []models.LogEntry) { return },
+		LogFunc: func(logs []models.LogEntry) { return },
 	}
 	ctx, cancel := context.WithCancel(context.TODO())
 	NewNATSEventSource(natsConnectorMock, logHandler).Start(ctx, RegistrationData{}, make(chan EventUpdate))
@@ -172,7 +172,7 @@ func TestEventSourceCancelDisconnectFromBrokerFails(t *testing.T) {
 func TestEventSourceQueueSubscribeFails(t *testing.T) {
 	natsConnectorMock := &NATSConnectorMock{QueueSubscribeMultipleFn: func(strings []string, s string, fn nats2.ProcessEventFn) error { return fmt.Errorf("error occured") }}
 	logHandler := &fake.LogInterfaceMock{
-		LogFn: func(logs []models.LogEntry) { return },
+		LogFunc: func(logs []models.LogEntry) { return },
 	}
 	eventSource := NewNATSEventSource(natsConnectorMock, logHandler)
 	err := eventSource.Start(context.TODO(), RegistrationData{}, make(chan EventUpdate))
@@ -185,7 +185,7 @@ func TestEventSourceOnSubscriptionUpdate(t *testing.T) {
 		UnsubscribeAllFn:         func() error { return nil },
 	}
 	logHandler := &fake.LogInterfaceMock{
-		LogFn: func(logs []models.LogEntry) { return },
+		LogFunc: func(logs []models.LogEntry) { return },
 	}
 	eventSource := NewNATSEventSource(natsConnectorMock, logHandler)
 	err := eventSource.Start(context.TODO(), RegistrationData{}, make(chan EventUpdate))
@@ -202,7 +202,7 @@ func TestEventSourceOnSubscriptiOnUpdateUnsubscribeAllFails(t *testing.T) {
 		UnsubscribeAllFn:         func() error { return fmt.Errorf("error occured") },
 	}
 	logHandler := &fake.LogInterfaceMock{
-		LogFn: func(logs []models.LogEntry) { return },
+		LogFunc: func(logs []models.LogEntry) { return },
 	}
 	eventSource := NewNATSEventSource(natsConnectorMock, logHandler)
 	err := eventSource.Start(context.TODO(), RegistrationData{}, make(chan EventUpdate))
@@ -219,7 +219,7 @@ func TestEventSourceOnSubscriptionUpdateQueueSubscribeMultipleFails(t *testing.T
 		UnsubscribeAllFn:         func() error { return nil },
 	}
 	logHandler := &fake.LogInterfaceMock{
-		LogFn: func(logs []models.LogEntry) { return },
+		LogFunc: func(logs []models.LogEntry) { return },
 	}
 	eventSource := NewNATSEventSource(natsConnectorMock, logHandler)
 	err := eventSource.Start(context.TODO(), RegistrationData{}, make(chan EventUpdate))
@@ -242,7 +242,7 @@ func TestEventSourceGetSender(t *testing.T) {
 		},
 	}
 	logHandler := &fake.LogInterfaceMock{
-		LogFn: func(logs []models.LogEntry) { return },
+		LogFunc: func(logs []models.LogEntry) { return },
 	}
 	sendFn := NewNATSEventSource(natsConnectorMock, logHandler).Sender()
 	require.NotNil(t, sendFn)
@@ -260,7 +260,7 @@ func TestEventSourceSenderFails(t *testing.T) {
 		},
 	}
 	logHandler := &fake.LogInterfaceMock{
-		LogFn: func(logs []models.LogEntry) { return },
+		LogFunc: func(logs []models.LogEntry) { return },
 	}
 	sendFn := NewNATSEventSource(natsConnectorMock, logHandler).Sender()
 	require.NotNil(t, sendFn)
@@ -276,7 +276,7 @@ func TestEventSourceStopDisconnectsFromEventBroker(t *testing.T) {
 		},
 	}
 	logHandler := &fake.LogInterfaceMock{
-		LogFn: func(logs []models.LogEntry) { return },
+		LogFunc: func(logs []models.LogEntry) { return },
 	}
 	err := NewNATSEventSource(natsConnectorMock, logHandler).Stop()
 	require.NoError(t, err)
@@ -290,7 +290,7 @@ func TestEventSourceStopFails(t *testing.T) {
 		},
 	}
 	logHandler := &fake.LogInterfaceMock{
-		LogFn: func(logs []models.LogEntry) { return },
+		LogFunc: func(logs []models.LogEntry) { return },
 	}
 	err := NewNATSEventSource(natsConnectorMock, logHandler).Stop()
 	require.Error(t, err)
diff --git a/cp-connector/pkg/controlplane/fake/loginterface_mock.go b/cp-connector/pkg/controlplane/fake/loginterface_mock.go
index 28eff9b5f..f85c4d95f 100644
--- a/cp-connector/pkg/controlplane/fake/loginterface_mock.go
+++ b/cp-connector/pkg/controlplane/fake/loginterface_mock.go
@@ -2,18 +2,40 @@ package fake
 
 import (
 	"context"
+	"sync"
 
 	"github.com/keptn/go-utils/pkg/api/models"
 )
 
 type LogInterfaceMock struct {
-	LogFn func(logs []models.LogEntry)
+	LogFunc func(logs []models.LogEntry)
+
+	calls struct {
+		Log []struct {
+			Logs []models.LogEntry
+		}
+	}
+	lockLog sync.RWMutex
 }
 
 func (l *LogInterfaceMock) Log(logs []models.LogEntry) {
-	if l.LogFn != nil {
-		l.LogFn(logs)
+	if l.LogFunc != nil {
+		l.LogFunc(logs)
+		return
+	}
+	panic("implement me")
+}
+
+func (l *LogInterfaceMock) LogCalls() []struct {
+	Logs []models.LogEntry
+} {
+	var calls []struct {
+		Logs []models.LogEntry
 	}
+	l.lockLog.RLock()
+	calls = l.calls.Log
+	l.lockLog.RUnlock()
+	return calls
 }
 
 func (l *LogInterfaceMock) Flush() error {
diff --git a/cp-connector/pkg/controlplane/logforwarder.go b/cp-connector/pkg/controlplane/logforwarder.go
index 55b50cd40..1f2161b12 100644
--- a/cp-connector/pkg/controlplane/logforwarder.go
+++ b/cp-connector/pkg/controlplane/logforwarder.go
@@ -10,16 +10,19 @@ import (
 	"github.com/keptn/keptn/cp-connector/pkg/logger"
 )
 
+//go:generate moq -pkg fake -skip-ensure -out ./fake/logapi.go . LogAPI:LogAPIMock
+type LogAPI api.LogsV1Interface
+
 type LogForwarder interface {
 	Forward(keptnEvent models.KeptnContextExtendedCE, integrationID string) error
 }
 
 type LogForwardingHandler struct {
-	logApi api.LogsV1Interface
+	logApi LogAPI
 	logger logger.Logger
 }
 
-func NewLogForwarder(logApi api.LogsV1Interface) *LogForwardingHandler {
+func NewLogForwarder(logApi LogAPI) *LogForwardingHandler {
 	return &LogForwardingHandler{
 		logApi: logApi,
 		logger: logger.NewDefaultLogger(),
diff --git a/cp-connector/pkg/controlplane/logforwarder_test.go b/cp-connector/pkg/controlplane/logforwarder_test.go
index 64cf22006..c0755c515 100644
--- a/cp-connector/pkg/controlplane/logforwarder_test.go
+++ b/cp-connector/pkg/controlplane/logforwarder_test.go
@@ -16,6 +16,7 @@ func TestLogForwarderNoForward(t *testing.T) {
 	keptnEvent := models.KeptnContextExtendedCE{ID: "some-id", Type: strutils.Stringp("sh.keptn.event.echo.triggered")}
 	err := logForwarder.Forward(keptnEvent, "some-other-id")
 	require.Nil(t, err)
+	require.Len(t, logHandler.LogCalls(), 0)
 }
 
 func TestLogForwarderFinishedNoForward(t *testing.T) {
@@ -24,6 +25,7 @@ func TestLogForwarderFinishedNoForward(t *testing.T) {
 	keptnEvent := models.KeptnContextExtendedCE{ID: "some-id", Type: strutils.Stringp("sh.keptn.event.echo.finished"), Data: keptnv2.EventData{Status: keptnv2.StatusSucceeded}}
 	err := logForwarder.Forward(keptnEvent, "some-other-id")
 	require.Nil(t, err)
+	require.Len(t, logHandler.LogCalls(), 0)
 }
 
 func TestLogForwarderFinishedInvalidEventType(t *testing.T) {
@@ -32,16 +34,18 @@ func TestLogForwarderFinishedInvalidEventType(t *testing.T) {
 	keptnEvent := models.KeptnContextExtendedCE{ID: "some-id", Type: strutils.Stringp("sh.keptn.event.echo.finished"), Data: "some invalid data"}
 	err := logForwarder.Forward(keptnEvent, "some-other-id")
 	require.NotNil(t, err)
+	require.Len(t, logHandler.LogCalls(), 0)
 }
 
 func TestLogForwarderFinishedForward(t *testing.T) {
 	logHandler := &fake.LogInterfaceMock{
-		LogFn: func(logs []models.LogEntry) {},
+		LogFunc: func(logs []models.LogEntry) {},
 	}
 	logForwarder := NewLogForwarder(logHandler)
 	keptnEvent := models.KeptnContextExtendedCE{ID: "some-id", Type: strutils.Stringp("sh.keptn.event.echo.finished"), Data: keptnv2.EventData{Status: keptnv2.StatusErrored}}
 	err := logForwarder.Forward(keptnEvent, "some-other-id")
 	require.Nil(t, err)
+	require.Len(t, logHandler.LogCalls(), 1)
 }
 
 func TestLogForwarderErrorInvalidEventType(t *testing.T) {
@@ -50,14 +54,16 @@ func TestLogForwarderErrorInvalidEventType(t *testing.T) {
 	keptnEvent := models.KeptnContextExtendedCE{ID: "some-id", Type: strutils.Stringp("sh.keptn.log.error"), Data: "some invalid data"}
 	err := logForwarder.Forward(keptnEvent, "some-other-id")
 	require.NotNil(t, err)
+	require.Len(t, logHandler.LogCalls(), 0)
 }
 
 func TestLogForwarderErrorForward(t *testing.T) {
 	logHandler := &fake.LogInterfaceMock{
-		LogFn: func(logs []models.LogEntry) {},
+		LogFunc: func(logs []models.LogEntry) {},
 	}
 	logForwarder := NewLogForwarder(logHandler)
 	keptnEvent := models.KeptnContextExtendedCE{ID: "some-id", Type: strutils.Stringp("sh.keptn.log.error")}
 	err := logForwarder.Forward(keptnEvent, "some-other-id")
 	require.Nil(t, err)
+	require.Len(t, logHandler.LogCalls(), 1)
 }
